#Q3. visit the URL and convert the UML diagram into a Python class.#

import random

# Class representing an Audio with name, URL, and user ratings
class Audio:
    def __init__(self, name, url):
        self.name= name
        self.url= url
        self.ratings= []
    
    def add_rating(self, rating):
        if 1 <= rating <= 5:
            self.ratings.append(rating)

    def audio_average_rating(self):
        # Calculate and return the average rating
        return sum(self.ratings) / len(self.ratings) if self.ratings else 0

# Class representing a Playlist with name, genre, and user ratings
class Playlist:
    def __init__(self, name, genre):
        self.name= name
        self.genre= genre
        self.audios= []
        self.ratings= []

    def add_audio(self, audio):
        self.audios.append(audio)

    def add_rating(self, rating):
        if 1 <= rating <= 5:
            self.ratings.append(rating)

    def playlist_average_rating(self):
        # Calculate and return the average rating for the playlist
        return sum(self.ratings) / len(self.ratings) if self.ratings else 0

# Class representing a User with a name
class User:
    def __init__(self, name):
        self.name= name

    def rate_audio(self, audio, rating):
        audio.add_rating(rating)

    def rate_playlist(self, playlist, rating):
        playlist.add_rating(rating)


# Class representing a MusicPlayer with users and playlists
class MusicPlayer:
    def __init__(self):
        self.users= []
        self.playlists= []

    def create_user(self, name):
        user= User(name)
        self.users.append(user)
        return user
    
    def create_playlist(self, name, genre):
        playlist= Playlist(name, genre)
        self.playlists.append(playlist)
        return playlist
    
    def search_audio_by_name(self, name):
        pass

    def search_playlist_by_name(self, name):
        pass

player= MusicPlayer()

# Creating users
user1= player.create_user('Sunisha')
user2= player.create_user('Bijaya')
user3= player.create_user('Anne')

# Creating playlists
playlist1= player.create_playlist("Pop songs", 'Pop')
playlist2= player.create_playlist("Rock songs", 'Rock')

# Creating audio with URLs
audio1= Audio("Song 1", "https://www.jiosaavn.com/song/akhiyaan-gulaab-from-teri-baaton-mein-aisa-uljha-jiya/NQQcXh54aFU")
audio2= Audio("Song 2", "https://www.jiosaavn.com/song/teri-baaton-mein-aisa-uljha-jiya-title-song-from-teri-baaton-mein-aisa-uljha-jiya/RA5TBDp2RUc")

# Adding audio to playlists
playlist1.add_audio(audio1)
playlist2.add_audio(audio2)

# Rating audios and playlists by users
user1.rate_audio(audio1, random.randint(4, 5))
user2.rate_audio(audio1, random.randint(3, 4))
user3.rate_audio(audio2, random.randint(2, 5))

user1.rate_playlist(playlist1, random.randint(4, 4))
user2.rate_playlist(playlist1, random.randint(2, 4))
user3.rate_playlist(playlist2, random.randint(4, 5))

# Calculating average ratings
average_rating_audio1= audio1.audio_average_rating()
average_rating_playlist1= playlist1.playlist_average_rating()

average_rating_audio2= audio2.audio_average_rating()
average_rating_playlist2= playlist2.playlist_average_rating()

# Displaying average ratings
print(f"Average Rating for 'Song 1': {average_rating_audio1}")
print(f"Average Rating for 'Pop songs' playlist: {average_rating_playlist1}")
print(f"Average Rating for 'Song 2': {average_rating_audio2}")
print(f"Average Rating for 'Rock songs' playlist: {average_rating_playlist2}")

#Ouput- Average Rating for 'Song 1': 4.0, Average Rating for 'Pop songs' playlist: 4.0, Average Rating for 'Song 2': 3.0, Average Rating for 'Rock songs' playlist: 4.0


